diff -up Sigil-1.9.20/src/EmbedPython/EmbeddedPython.cpp.omv~ Sigil-1.9.20/src/EmbedPython/EmbeddedPython.cpp
--- Sigil-1.9.20/src/EmbedPython/EmbeddedPython.cpp.omv~	2022-11-16 15:56:03.354351271 +0100
+++ Sigil-1.9.20/src/EmbedPython/EmbeddedPython.cpp	2022-11-16 15:56:13.391370511 +0100
@@ -480,7 +480,7 @@ QVariant EmbeddedPython::PyObjectToQVari
 
         if (kind == PyUnicode_1BYTE_KIND) {
             // latin 1 according to PEP 393
-            res = QVariant(QString::fromLatin1(reinterpret_cast<const char *>PyUnicode_1BYTE_DATA(po), -1));
+            res = QVariant(QString::fromLatin1(reinterpret_cast<const char *>(PyUnicode_1BYTE_DATA(po)), -1));
 
         } else if (kind == PyUnicode_2BYTE_KIND) {
 #if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
diff -up Sigil-1.9.20/src/Exporters/ExportEPUB.cpp.omv~ Sigil-1.9.20/src/Exporters/ExportEPUB.cpp
--- Sigil-1.9.20/src/Exporters/ExportEPUB.cpp.omv~	2022-11-16 15:53:45.990087949 +0100
+++ Sigil-1.9.20/src/Exporters/ExportEPUB.cpp	2022-11-16 15:55:27.846283204 +0100
@@ -145,7 +145,7 @@ void ExportEPUB::SaveFolderAsEpubToLocat
     fileInfo.tmz_date.tm_year = timeNow.date().year();
 
      // Write the mimetype. This must be uncompressed and the first entry in the archive.
-    if (zipOpenNewFileInZip64(zfile, "mimetype", &fileInfo, NULL, 0, NULL, 0, NULL, Z_NO_COMPRESSION, 0, 0) != ZIP_OK) {
+    if (zipOpenNewFileInZip_64(zfile, "mimetype", &fileInfo, NULL, 0, NULL, 0, NULL, 0, 0, 0) != ZIP_OK) {
         zipClose(zfile, NULL);
         QFile::remove(tempFile);
         throw(CannotStoreFile("mimetype"));
@@ -203,7 +203,7 @@ void ExportEPUB::SaveFolderAsEpubToLocat
 
         // Add the file entry to the archive.
         // We should check the uncompressed file size. If it's over >= 0xffffffff the last parameter (zip64) should be 1.
-        if (zipOpenNewFileInZip4_64(zfile, relpath.toUtf8().constData(), &fileInfo, NULL, 0, NULL, 0, NULL, Z_DEFLATED, 8, 0, 15, 8, Z_DEFAULT_STRATEGY, NULL, 0, 0x0b00, 1<<11, 0) != ZIP_OK) {
+        if (zipOpenNewFileInZip4_64(zfile, relpath.toUtf8().constData(), &fileInfo, NULL, 0, NULL, 0, NULL, Z_DEFLATED, 8, 0, 15, 8, 0, NULL, 0, 0x0b00, 1<<11, 0) != ZIP_OK) {
             zipClose(zfile, NULL);
             QFile::remove(tempFile);
             throw(CannotStoreFile(relpath.toStdString()));
